void imprimir(int filas, int columnas, float * );
void pivotear(int filas, int columnas, float *, float*,float*,int j);

int main()
{
   
    int filas = 0, columnas = 0;
   
    printf("Ingresa el numero de filas: ");
    scanf("%i",&filas);
    printf("\nIngresa el numero de columanas: ");
    scanf("%i",&columnas);
    columnas = columnas + 1;
    float MatrizA[filas][columnas];
   
    printf("\nIngresa los valores de la matriz A:");
    for(int j=0; j<columnas;j++)
    {
        for(int i = 0; i<filas; i++)
        {
            if (columnas - 1 == j)
            {
                printf("\nIngresa los datos del vector de resultados");
            }
            printf("\nIngresa el valor de en (%i,%i): ",i+1,j+1);
            scanf("%f",&MatrizA[i][j]);
        }
    }
   
    printf("Matriz Inicial\n");
    imprimir(filas,columnas,&MatrizA[0][0]);
    printf("\n");
   
    //Metodo de gauss
   
    float pivoteaux = 0;
    float vectorPivote[columnas];
    float vectorPivoteaux[columnas];
    float n = 0;
   

        for(int j =0; j<columnas-1;j++)
        {
           
            pivotear(filas, columnas,&MatrizA[0][0], &vectorPivote[0], &vectorPivoteaux[0], j);
           
            for(int i = 0; i<filas; i++)
            {
                printf("\n(%d,%d)\n",i+1,j+1);
           
             if (i != j && j < columnas-1)
             {
                n = MatrizA[i][j];
               
             }
             
         
         
            for(int k = 0; k < columnas; k++)
            {
                MatrizA[i][k] = (-1*n*vectorPivote[k]) + MatrizA[i][k];
               
            }
             
             if(i == j )
             {
               
                for(int l = 0; l < columnas; l++)
                {
                    MatrizA[i][l] = vectorPivoteaux[l];
                    if(MatrizA[i][l] == -0)
                    {
                        MatrizA[i][l] = 0;
                    }
                   
                }      
             }
             imprimir(filas,columnas,&MatrizA[0][0]);          
            }
           
            // Se limpia la fila pivote para evitar arrastrar basura al igual que n
            n = 0;      
            for(int k = 0; k < columnas; k++)
            {
                 vectorPivote[k] = 0;
            }
           
   
    }          
     
}

void imprimir(int filas, int columnas, float * MatrizA)
{
    printf("\n\n");
    int contar = 0;
       
    for(int i = 0; i<filas*columnas; i++)
    {
        if(contar < columnas)
        {
            printf(" %f ",MatrizA[i]);
            contar++;
        }
        else
        {
            contar = 0;
            printf("\n");
            printf(" %f ",MatrizA[i]);
            contar++;
        }
       
    }
   
}

void pivotear(int filas, int columnas, float *MatrizA, float *vectorPivote, float *vectorPivoteaux, int j)
{
    float pivoteaux = 0;
    float matrizTemporal[filas][columnas];
    int sumi = 0;
    //Copiamos los datos de la MatrizA  a una matriz temporal porque al enviarla como apuntador esta se convierte en un vector.
   
    for (int  i =  0; i < filas; i++)
    {
        for( int k = 0; k < columnas; k++)
        {
            matrizTemporal[i][k] = MatrizA[sumi];
            sumi ++;
        }
    }